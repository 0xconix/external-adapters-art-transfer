// SPDX-License-Identifier: MIT pragma solidity ^0.8.7; import "@chainlink/contracts/src/v0.8/ChainlinkClient.sol"; /** * Request testnet LINK and ETH here: https://faucets.chain.link/ * Find information on LINK Token Contracts and get the latest ETH and LINK faucets here: https://docs.chain.link/docs/link-token-contracts/ */ /** * THIS IS AN EXAMPLE CONTRACT WHICH USES HARDCODED VALUES FOR CLARITY. * PLEASE DO NOT USE THIS CODE IN PRODUCTION. */ contract APIConsumer is ChainlinkClient { using Chainlink for Chainlink.Request; uint256 public volume; uint256 public season; address private oracle; bytes32 private jobId; uint256 private fee; /** * Network: Kovan * Oracle: 0xc57B33452b4F7BB189bB5AfaE9cc4aBa1f7a4FD8 (Chainlink Devrel * Node) * Job ID: d5270d1c311941d0b08bead21fea7747 * Fee: 0.1 LINK */ constructor() { setChainlinkToken(0x0b9d5D9136855f6FEc3c0993feE6E9CE8a297846); oracle = 0x9814AeB073DAde86e9b5A65073eBD454C16b8731; //jobId = "cf414b59d16c4a40bbdfda593aa84f05"; jobId = "8ebf77debe6346b0821f8c62c3d24798"; fee = 0.1 * 10 ** 18; // (Varies by network and job) } /** * Create a Chainlink request to retrieve API response, find the target * data, then multiply by 1000000000000000000 (to remove decimal places from data). */ function requestVolumeData() public returns (bytes32 requestId) { Chainlink.Request memory request = buildChainlinkRequest(jobId, address(this), this.fulfill.selector); request.add("playerId", "90026531"); // Multiply the result by 1000000000000000000 to remove decimals //int timesAmount = 10**18; //request.addInt("times", timesAmount); // Sends the request return sendChainlinkRequestTo(oracle, request, fee); } /** * Receive the response in the form of uint256 */ function fulfill(bytes32 _requestId, uint256 _volume, uint256 _season) public recordChainlinkFulfillment(_requestId) { volume = _volume; season = _season; } // function withdrawLink() external {} - Implement a withdraw function to avoid locking your LINK in the contract }